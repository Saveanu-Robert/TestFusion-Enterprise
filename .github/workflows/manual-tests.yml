name: Manual Test Execution

on:
  workflow_dispatch:
    inputs:
      test-type:
        description: 'Type of tests to run'
        required: true
        default: 'api'
        type: choice
        options:
          - api
          - web
          - all
      browser:
        description: 'Browser to test with (only for web/all tests)'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      environment:
        description: 'Test environment'
        required: false
        default: 'default'
        type: choice
        options:
          - default
          - staging
          - production
      parallel:
        description: 'Run tests in parallel'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  manual-tests:
    name: Manual Test Execution
    runs-on: ubuntu-latest
    env:
      # API Configuration - Set defaults
      API_BASE_URL: https://jsonplaceholder.typicode.com
      API_TIMEOUT: 30000
      API_RETRY_ATTEMPTS: 3
      # Test Environment - will be overridden based on selection
      TEST_ENV: development
      # Logging Configuration
      LOG_LEVEL: INFO
      ENABLE_REQUEST_LOGGING: true
      ENABLE_RESPONSE_LOGGING: true      # Reporting Configuration
      ENABLE_SCREENSHOTS: true
      ENABLE_VIDEOS: false
      ENABLE_TRACING: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: ${{ github.event.inputs.test-type == 'web' || github.event.inputs.test-type == 'all' }}
        run: |
          if [ "${{ github.event.inputs.browser }}" = "all" ]; then
            echo "🎭 Installing all Playwright browsers..."
            npx playwright install --with-deps
          else
            echo "🎭 Installing Playwright browser: ${{ github.event.inputs.browser }}"
            npx playwright install --with-deps ${{ github.event.inputs.browser }}
          fi

      - name: Set test environment
        run: |
          echo "🌍 Setting up test environment: ${{ github.event.inputs.environment }}"
          
          # Set environment-specific configurations
          case "${{ github.event.inputs.environment }}" in
            "staging")
              echo "TEST_ENV=staging" >> $GITHUB_ENV
              echo "BASE_URL=https://staging-api.example.com" >> $GITHUB_ENV
              ;;
            "production")
              echo "TEST_ENV=production" >> $GITHUB_ENV
              echo "BASE_URL=https://api.example.com" >> $GITHUB_ENV
              ;;
            *)
              echo "TEST_ENV=default" >> $GITHUB_ENV
              echo "BASE_URL=https://jsonplaceholder.typicode.com" >> $GITHUB_ENV
              ;;
          esac

      - name: Run tests
        run: |
          # Configure parallel execution
          WORKERS=""
          if [ "${{ github.event.inputs.parallel }}" = "true" ]; then
            WORKERS="--workers=4"
          else
            WORKERS="--workers=1"
          fi
          
          # Run specific test type
          case "${{ github.event.inputs.test-type }}" in
            "api")
              echo "📡 Running API tests (no browser needed)"
              npm run test:api $WORKERS --reporter=html,json
              ;;
            "web")
              echo "🌐 Running Web/UI tests with browser: ${{ github.event.inputs.browser }}"
              if [ -d "tests/web" ] || [ -d "tests/ui" ] || find tests/ -name "*.page.spec.ts" | grep -q .; then
                if [ "${{ github.event.inputs.browser }}" = "all" ]; then
                  npm run test:web $WORKERS --reporter=html,json
                else
                  npm run test:web -- --project=${{ github.event.inputs.browser }} $WORKERS --reporter=html,json
                fi
              else
                echo "⚠️ No web tests found, creating placeholder test result"
                mkdir -p test-results
                echo "No web tests available in this project" > test-results/web-tests-info.txt
              fi              ;;
            "all")
              echo "🚀 Running ALL tests with browser: ${{ github.event.inputs.browser }}"
              if [ "${{ github.event.inputs.browser }}" = "all" ]; then
                npm run test $WORKERS --reporter=html,json
              else                npm run test -- --project=${{ github.event.inputs.browser }} $WORKERS --reporter=html,json
              fi
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: manual-test-results-${{ github.event.inputs.test-type }}-${{ github.event.inputs.test-type == 'api' && 'no-browser' || github.event.inputs.browser }}-${{ github.event.inputs.environment }}
          path: |
            test-results/
            enterprise-reports/
          retention-days: 30
  test-summary:
    name: Manual Test Summary
    runs-on: ubuntu-latest
    needs: manual-tests
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🧪 Manual Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Type**: ${{ github.event.inputs.test-type }}" >> $GITHUB_STEP_SUMMARY
          
          # Only show browser info for web and all tests
          if [ "${{ github.event.inputs.test-type }}" != "api" ]; then
            echo "- **Browser**: ${{ github.event.inputs.browser }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Browser**: Not applicable (API tests only)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: ${{ github.event.inputs.parallel }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.manual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.manual-tests.result }}" = "success" ]; then
            echo "✅ **All manual tests completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Manual test execution failed. Check the test artifacts for details.**" >> $GITHUB_STEP_SUMMARY
          fi
