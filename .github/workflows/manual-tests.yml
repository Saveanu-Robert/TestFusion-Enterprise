name: Manual Tests

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - api
        - web-local
        - web-grid
        - web-browserstack
      browser:
        description: 'Browser to use (for web tests)'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
      environment:
        description: 'Test environment'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

# Add explicit permissions for the workflow
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  issues: write

env:
  # This is the only secret needed - the encryption key for decrypting .env values
  ENV_ENCRYPTION_KEY: ${{ secrets.ENV_ENCRYPTION_KEY }}

jobs:
  manual-test:
    timeout-minutes: 90
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Decrypt and load environment variables
      run: |
        # Process .env file to decrypt sensitive values and export all variables
        node scripts/env-crypto.js process-env .env > .env.decrypted
        
        # Export all environment variables for subsequent steps
        while IFS='=' read -r key value; do
          # Skip comments and empty lines
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            # Remove quotes if present and export
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"  # Mask sensitive values in logs
          fi
        done < .env.decrypted
        
        # Clean up temporary file
        rm -f .env.decrypted

    - name: Override environment variables based on inputs
      run: |
        # Override TEST_ENV based on workflow input
        echo "TEST_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        
        # Override browser for web tests if specified
        if [[ "${{ github.event.inputs.browser }}" != "chromium" ]]; then
          echo "CI_BROWSER=${{ github.event.inputs.browser }}" >> $GITHUB_ENV
        fi

    - name: Install Playwright Browsers
      if: github.event.inputs.test_type != 'api'
      run: npx playwright install --with-deps

    - name: Setup Selenium Grid (for grid tests)
      if: github.event.inputs.test_type == 'web-grid' || github.event.inputs.test_type == 'all'
      run: |
        # Start Selenium Grid in the background
        docker run -d -p 4444:4444 -p 7900:7900 --shm-size=2g selenium/standalone-chrome:latest
        
        # Wait for grid to be ready
        timeout 60 bash -c 'until curl -sSf http://localhost:4444/wd/hub/status; do sleep 2; done'

    - name: Run API Tests
      if: github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all'
      run: npm run test:api

    - name: Run Web Tests (Local)
      if: github.event.inputs.test_type == 'web-local' || github.event.inputs.test_type == 'all'
      run: npm run test:web

    - name: Run Web Tests (Grid)
      if: github.event.inputs.test_type == 'web-grid' || github.event.inputs.test_type == 'all'
      run: npm run test:web:grid

    - name: Run Web Tests (BrowserStack)
      if: github.event.inputs.test_type == 'web-browserstack' || github.event.inputs.test_type == 'all'
      run: npm run test:web:browserstack

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: manual-test-results-${{ github.event.inputs.test_type }}-${{ github.run_number }}
        path: |
          playwright-report/
          test-results/
        retention-days: 14

    - name: Upload Playwright Report
      if: always() && github.event.inputs.test_type != 'api'
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-manual-${{ github.run_number }}
        path: playwright-report/
        retention-days: 30

    - name: Generate test results summary
      if: always()
      run: |
        # Determine status with proper emoji
        if [[ "${{ job.status }}" == "success" ]]; then
          STATUS="✅ Passed"
          STATUS_EMOJI="🎉"
        elif [[ "${{ job.status }}" == "failure" ]]; then
          STATUS="❌ Failed"
          STATUS_EMOJI="💥"
        elif [[ "${{ job.status }}" == "cancelled" ]]; then
          STATUS="🚫 Cancelled"
          STATUS_EMOJI="⏹️"
        else
          STATUS="⚠️ ${{ job.status }}"
          STATUS_EMOJI="❓"
        fi
        
        # Create a comprehensive test results summary
        echo "# ${STATUS_EMOJI} Manual Test Results" > test-summary.md
        echo "" >> test-summary.md
        echo "| Field | Value |" >> test-summary.md
        echo "|-------|-------|" >> test-summary.md
        echo "| **Test Type** | \`${{ github.event.inputs.test_type }}\` |" >> test-summary.md
        echo "| **Environment** | \`${{ github.event.inputs.environment }}\` |" >> test-summary.md
        echo "| **Browser** | \`${{ github.event.inputs.browser }}\` |" >> test-summary.md
        echo "| **Status** | ${STATUS} |" >> test-summary.md
        echo "| **Run ID** | \`${{ github.run_number }}\` |" >> test-summary.md
        echo "| **Commit** | \`${{ github.sha }}\` |" >> test-summary.md
        echo "| **Timestamp** | \`$(date -u +"%Y-%m-%d %H:%M:%S UTC")\` |" >> test-summary.md
        echo "" >> test-summary.md
        
        # Add workflow links
        echo "## 🔗 Links" >> test-summary.md
        echo "- 🏃 [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> test-summary.md
        echo "- 📊 [All Workflow Runs](https://github.com/${{ github.repository }}/actions)" >> test-summary.md
        echo "- 📝 [Repository](https://github.com/${{ github.repository }})" >> test-summary.md
        echo "" >> test-summary.md
        
        # Add test type specific information
        if [[ "${{ github.event.inputs.test_type }}" == "api" ]]; then
          echo "## 🔌 API Test Results" >> test-summary.md
          echo "" >> test-summary.md
          echo "### What was tested:" >> test-summary.md
          echo "- ✅ JSONPlaceholder API endpoints" >> test-summary.md
          echo "- ✅ CRUD operations for posts, users, and comments" >> test-summary.md
          echo "- ✅ Data validation and response structure" >> test-summary.md
          echo "- ✅ Error handling and edge cases" >> test-summary.md
        elif [[ "${{ github.event.inputs.test_type }}" =~ web ]]; then
          echo "## 🌐 Web Test Results" >> test-summary.md
          echo "" >> test-summary.md
          echo "### What was tested:" >> test-summary.md
          echo "- ✅ Playwright documentation site navigation" >> test-summary.md
          echo "- ✅ Page loading and responsiveness" >> test-summary.md
          echo "- ✅ Cross-browser compatibility" >> test-summary.md
          echo "- ✅ Accessibility and user experience" >> test-summary.md
          echo "- ✅ Mobile viewport testing" >> test-summary.md
          echo "" >> test-summary.md
          echo "**Browser Used:** \`${{ github.event.inputs.browser }}\`" >> test-summary.md
        elif [[ "${{ github.event.inputs.test_type }}" == "all" ]]; then
          echo "## 🚀 Full Test Suite Results" >> test-summary.md
          echo "" >> test-summary.md
          echo "### What was tested:" >> test-summary.md
          echo "- ✅ Complete API test suite" >> test-summary.md
          echo "- ✅ Full web UI test suite" >> test-summary.md
          echo "- ✅ Cross-browser compatibility" >> test-summary.md
          echo "- ✅ End-to-end user journeys" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        
        # Display the summary in the workflow logs for debugging
        echo "==================== TEST SUMMARY ===================="
        cat test-summary.md
        echo "======================================================"

    - name: Upload test summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-summary-${{ github.event.inputs.test_type }}-${{ github.run_number }}
        path: test-summary.md
        retention-days: 30

    - name: Create enhanced job summary
      if: always()
      run: |
        # Add the test summary to GitHub's job summary
        cat test-summary.md >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add artifacts section with proper formatting
        echo "## 📦 Test Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following artifacts were generated during this test run:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add artifact information
        echo "| Artifact | Description | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Test Results | Complete test execution results and logs | ~6MB |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event.inputs.test_type }}" != "api" ]]; then
          echo "| 📈 Playwright Report | Interactive HTML report with screenshots | ~6MB |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "| 📝 Test Summary | Markdown summary of test execution | ~500B |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add instructions for downloading artifacts
        echo "### 💡 How to Download Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the [workflow run page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "2. Scroll down to the **Artifacts** section" >> $GITHUB_STEP_SUMMARY
        echo "3. Click on any artifact name to download it" >> $GITHUB_STEP_SUMMARY
        echo "4. Extract the downloaded ZIP file to view contents" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add next steps
        echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "- ✅ All tests passed! No action required." >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Review the Playwright report for detailed test execution information" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Consider running additional test types if needed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Some tests failed. Please review the artifacts for details." >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Check the test logs for specific failure information" >> $GITHUB_STEP_SUMMARY
          echo "- 🛠️ Fix any issues and re-run the tests" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated automatically by TestFusion-Enterprise CI/CD Pipeline*" >> $GITHUB_STEP_SUMMARY
