name: Manual Test Execution

on:
  workflow_dispatch:
    inputs:
      test-type:
        description: 'Type of tests to run'
        required: true
        default: 'api'
        type: choice
        options:
          - api
          - web
          - all
      browser:
        description: 'Browser to test with'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      environment:
        description: 'Test environment'
        required: false
        default: 'default'
        type: choice
        options:
          - default
          - staging
          - production
      parallel:
        description: 'Run tests in parallel'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  manual-tests:
    name: Manual Test Execution
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: ${{ github.event.inputs.browser == 'all' && fromJSON('["chromium", "firefox", "webkit"]') || fromJSON(format('["{0}"]', github.event.inputs.browser)) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Set test environment
        run: |
          echo "🌍 Setting up test environment: ${{ github.event.inputs.environment }}"
          
          # Set environment-specific configurations
          case "${{ github.event.inputs.environment }}" in
            "staging")
              echo "TEST_ENV=staging" >> $GITHUB_ENV
              echo "BASE_URL=https://staging-api.example.com" >> $GITHUB_ENV
              ;;
            "production")
              echo "TEST_ENV=production" >> $GITHUB_ENV
              echo "BASE_URL=https://api.example.com" >> $GITHUB_ENV
              ;;
            *)
              echo "TEST_ENV=default" >> $GITHUB_ENV
              echo "BASE_URL=https://jsonplaceholder.typicode.com" >> $GITHUB_ENV
              ;;
          esac

      - name: Run tests
        run: |
          echo "🧪 Running ${{ github.event.inputs.test-type }} tests on ${{ matrix.browser }}"
          
          # Configure parallel execution
          WORKERS=""
          if [ "${{ github.event.inputs.parallel }}" = "true" ]; then
            WORKERS="--workers=4"
          else
            WORKERS="--workers=1"
          fi
          
          # Run specific test type
          case "${{ github.event.inputs.test-type }}" in
            "api")
              npx playwright test tests/api/ --project=${{ matrix.browser }} $WORKERS --reporter=html,json
              ;;
            "web")
              if [ -d "tests/web" ] || [ -d "tests/ui" ] || find tests/ -name "*.page.spec.ts" | grep -q .; then
                npx playwright test tests/web/ tests/ui/ tests/pages/ --project=${{ matrix.browser }} $WORKERS --reporter=html,json
              else
                echo "⚠️ No web tests found, creating placeholder test result"
                mkdir -p test-results
                echo "No web tests available in this project" > test-results/web-tests-info.txt
              fi
              ;;
            "all")
              npx playwright test --project=${{ matrix.browser }} $WORKERS --reporter=html,json
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: manual-test-results-${{ github.event.inputs.test-type }}-${{ matrix.browser }}-${{ github.event.inputs.environment }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  test-summary:
    name: Manual Test Summary
    runs-on: ubuntu-latest
    needs: manual-tests
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🧪 Manual Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Type**: ${{ github.event.inputs.test-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Browser**: ${{ github.event.inputs.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: ${{ github.event.inputs.parallel }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.manual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.manual-tests.result }}" = "success" ]; then
            echo "✅ **All manual tests completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Manual test execution failed. Check the test artifacts for details.**" >> $GITHUB_STEP_SUMMARY
          fi
