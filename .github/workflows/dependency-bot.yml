name: Dependency Bot Tests

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - security
        - patch
        - minor
        - major

env:
  # This is the only secret needed - the encryption key for decrypting .env values
  ENV_ENCRYPTION_KEY: ${{ secrets.ENV_ENCRYPTION_KEY }}

jobs:
  dependency-check:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Decrypt and load environment variables
      run: |
        # Process .env file to decrypt sensitive values and export all variables
        node scripts/env-crypto.js process-env .env > .env.decrypted
        
        # Export all environment variables for subsequent steps
        while IFS='=' read -r key value; do
          # Skip comments and empty lines
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            # Remove quotes if present and export
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"  # Mask sensitive values in logs
          fi
        done < .env.decrypted
        
        # Clean up temporary file
        rm -f .env.decrypted

    - name: Check for dependency updates
      run: |
        # Install npm-check-updates globally
        npm install -g npm-check-updates
        
        # Check for updates and save to file
        ncu --format json > dependency-updates.json || true
        
        # Display current updates
        echo "📦 Checking for dependency updates..."
        ncu || true

    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        npm audit --audit-level moderate || true
        
        # Generate audit report
        npm audit --json > security-audit.json || true

    - name: Install current dependencies
      run: npm ci

    - name: Run tests with current dependencies
      run: |
        echo "🧪 Running tests with current dependencies..."
        npm run test:api
      continue-on-error: true

    - name: Install Playwright for web tests
      run: npx playwright install --with-deps chromium

    - name: Run web tests with current dependencies
      run: |
        echo "🌐 Running web tests with current dependencies..."
        npm run test:web
      continue-on-error: true

    - name: Test dependency updates (if manual dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "🔄 Testing with updated dependencies..."
        
        # Update dependencies based on input
        case "${{ github.event.inputs.update_type }}" in
          "security")
            npm audit fix --audit-level moderate || true
            ;;
          "patch")
            ncu -u --target patch || true
            ;;
          "minor")
            ncu -u --target minor || true
            ;;
          "major")
            ncu -u --target latest || true
            ;;
          "all")
            ncu -u || true
            ;;
        esac
        
        # Install updated dependencies
        npm install
        
        # Run tests with updated dependencies
        npm run test:api || echo "❌ API tests failed with updates"
        npm run test:web || echo "❌ Web tests failed with updates"

    - name: Generate dependency report
      if: always()
      run: |
        echo "📋 Generating dependency report..."
        
        # Create a comprehensive report
        cat > dependency-report.md << 'EOF'
        # Dependency Report 📦
        
        Generated on: $(date)
        
        ## Current Dependencies
        \`\`\`json
        $(npm list --json --depth=0 2>/dev/null || echo "{}")
        \`\`\`
        
        ## Available Updates
        \`\`\`
        $(cat dependency-updates.json 2>/dev/null || echo "No updates available")
        \`\`\`
        
        ## Security Audit
        \`\`\`json
        $(cat security-audit.json 2>/dev/null || echo "{}")
        \`\`\`
        
        ## Test Results
        - API Tests: $(npm run test:api > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")
        - Web Tests: $(npm run test:web > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")
        EOF

    - name: Upload dependency reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports-${{ github.run_number }}
        path: |
          dependency-report.md
          dependency-updates.json
          security-audit.json
        retention-days: 30

    - name: Create issue for security vulnerabilities
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let securityIssues = [];
          try {
            const auditData = JSON.parse(fs.readFileSync('security-audit.json', 'utf8'));
            if (auditData.vulnerabilities && Object.keys(auditData.vulnerabilities).length > 0) {
              securityIssues = Object.entries(auditData.vulnerabilities);
            }
          } catch (e) {
            console.log('No security audit data found');
          }
          
          if (securityIssues.length > 0) {
            const issueTitle = `🚨 Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `## Security Vulnerabilities Found
            
            This issue was automatically created by the dependency bot workflow.
            
            **Vulnerabilities:** ${securityIssues.length}
            **Scan Date:** ${new Date().toISOString()}
            
            ### Action Required
            1. Review the security audit report in the workflow artifacts
            2. Update vulnerable dependencies
            3. Run tests to ensure compatibility
            4. Close this issue once resolved
            
            ### Workflow Run
            [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'dependencies'],
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['security', 'dependencies', 'automated']
              });
            }
          }
