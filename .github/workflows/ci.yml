name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - api
        - web
        - mobile
        - performance
        - accessibility
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      browser_matrix:
        description: 'Browser matrix to test'
        required: false
        default: 'standard'
        type: choice
        options:
        - minimal
        - standard
        - full

# Security and permissions
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write
  issues: write

# Global environment variables
env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright
  ENV_ENCRYPTION_KEY: ${{ secrets.ENV_ENCRYPTION_KEY }}

# Concurrency control to cancel previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality and Security
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should-run-tests: ${{ steps.changes.outputs.tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better analysis
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        npm audit --audit-level=moderate --json > audit-results.json || true
        
    - name: Check for dependency vulnerabilities
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('audit-results.json')) {
            const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            if (audit.metadata.vulnerabilities.high > 0 || audit.metadata.vulnerabilities.critical > 0) {
              core.setFailed(`Found ${audit.metadata.vulnerabilities.critical} critical and ${audit.metadata.vulnerabilities.high} high severity vulnerabilities`);
            }
          }
          
    - name: Type checking
      run: npm run typecheck
      
    - name: Lint check
      run: npm run lint:check
      
    - name: Format check
      run: npm run format:check
      
    - name: Check for file changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          tests:
            - 'tests/**'
            - 'playwright.config.ts'
            - 'package*.json'
            - '.env'
            
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit
        path: audit-results.json
        retention-days: 7

  # Job 2: Build and Validate
  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Build project
      run: npm run build
      
    - name: Run health check
      run: npm run monitor
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-dist
        path: dist/
        retention-days: 7

  # Job 3: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: needs.quality-gate.outputs.should-run-tests == 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        environment: [staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Decrypt and load environment variables
      run: |
        node scripts/env-crypto.js process-env .env > .env.decrypted
        while IFS='=' read -r key value; do
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"
          fi
        done < .env.decrypted
        rm -f .env.decrypted
        
    - name: Override environment
      run: echo "TEST_ENV=${{ matrix.environment }}" >> $GITHUB_ENV
      
    - name: Run API tests
      run: npm run test:api
      
    - name: Upload API test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-test-results-${{ matrix.environment }}
        path: |
          test-results/
          playwright-report/
        retention-days: 14

  # Job 4: Web Tests Matrix
  web-tests:
    name: Web Tests
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: needs.quality-gate.outputs.should-run-tests == 'true'
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox
          - browser: webkit
            project: webkit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Install Playwright Browsers
      run: npx playwright install ${{ matrix.browser }} --with-deps
      
    - name: Decrypt and load environment variables
      run: |
        node scripts/env-crypto.js process-env .env > .env.decrypted
        while IFS='=' read -r key value; do
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"
          fi
        done < .env.decrypted
        rm -f .env.decrypted
        
    - name: Run web tests
      run: npx playwright test --project=${{ matrix.project }}
      
    - name: Upload web test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: web-test-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 14

  # Job 5: Mobile Tests (Optional)
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: needs.quality-gate.outputs.should-run-tests == 'true' && github.event_name != 'pull_request'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    - name: Decrypt and load environment variables
      run: |
        node scripts/env-crypto.js process-env .env > .env.decrypted
        while IFS='=' read -r key value; do
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"
          fi
        done < .env.decrypted
        rm -f .env.decrypted
        
    - name: Run mobile tests
      run: npx playwright test --project=mobile-chrome --project=mobile-safari
      
    - name: Upload mobile test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mobile-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 14

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: needs.quality-gate.outputs.should-run-tests == 'true' && github.event_name != 'pull_request'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Install Playwright Browsers
      run: npx playwright install chromium --with-deps
      
    - name: Decrypt and load environment variables
      run: |
        node scripts/env-crypto.js process-env .env > .env.decrypted
        while IFS='=' read -r key value; do
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"
          fi
        done < .env.decrypted
        rm -f .env.decrypted
        
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Upload performance test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Job 7: Grid Tests (Selenium Grid)
  grid-tests:
    name: Grid Tests
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: needs.quality-gate.outputs.should-run-tests == 'true' && github.event_name == 'schedule'
    timeout-minutes: 40
    
    services:
      selenium-hub:
        image: selenium/hub:4.15.0
        ports:
          - 4444:4444
        env:
          GRID_MAX_SESSION: 4
          GRID_BROWSER_TIMEOUT: 300
          
      selenium-chrome:
        image: selenium/node-chrome:4.15.0
        env:
          HUB_HOST: selenium-hub
          NODE_MAX_INSTANCES: 2
          NODE_MAX_SESSION: 2
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Wait for Selenium Grid
      run: |
        timeout 60 bash -c 'until curl -sSf http://localhost:4444/wd/hub/status; do sleep 2; done'
        
    - name: Decrypt and load environment variables
      run: |
        node scripts/env-crypto.js process-env .env > .env.decrypted
        while IFS='=' read -r key value; do
          if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
            value=$(echo "$value" | sed 's/^"//;s/"$//')
            echo "$key=$value" >> $GITHUB_ENV
            echo "::add-mask::$value"
          fi
        done < .env.decrypted
        rm -f .env.decrypted
        
    - name: Set Grid execution mode
      run: echo "WEB_EXECUTION_MODE=grid" >> $GITHUB_ENV
      
    - name: Run grid tests
      run: npm run test:web:grid
      
    - name: Upload grid test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: grid-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 14

  # Job 8: Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [api-tests, web-tests, mobile-tests, performance-tests, grid-tests]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts/
        
    - name: Generate test summary
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Collect all test results
          const artifactsPath = 'test-artifacts';
          const summary = {
            timestamp: new Date().toISOString(),
            environment: process.env.TEST_ENV || 'ci',
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            skippedTests: 0,
            suites: []
          };
          
          if (fs.existsSync(artifactsPath)) {
            const artifacts = fs.readdirSync(artifactsPath);
            
            for (const artifact of artifacts) {
              const artifactPath = path.join(artifactsPath, artifact);
              if (fs.statSync(artifactPath).isDirectory()) {
                // Look for test results JSON files
                const resultsPath = path.join(artifactPath, 'test-results/test-results.json');
                if (fs.existsSync(resultsPath)) {
                  try {
                    const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                    summary.suites.push({
                      name: artifact,
                      ...results.stats
                    });
                    summary.totalTests += results.stats.total || 0;
                    summary.passedTests += results.stats.passed || 0;
                    summary.failedTests += results.stats.failed || 0;
                    summary.skippedTests += results.stats.skipped || 0;
                  } catch (e) {
                    console.log(`Failed to parse results for ${artifact}: ${e.message}`);
                  }
                }
              }
            }
          }
          
          // Create GitHub step summary
          const passRate = summary.totalTests > 0 ? ((summary.passedTests / summary.totalTests) * 100).toFixed(1) : '0';
          
          await core.summary
            .addHeading('🎯 TestFusion-Enterprise CI Results')
            .addTable([
              [{data: 'Metric', header: true}, {data: 'Value', header: true}],
              ['Total Tests', summary.totalTests.toString()],
              ['✅ Passed', summary.passedTests.toString()],
              ['❌ Failed', summary.failedTests.toString()],
              ['⏭️ Skipped', summary.skippedTests.toString()],
              ['📊 Pass Rate', `${passRate}%`]
            ])
            .addDetails('Test Suite Breakdown', summary.suites.map(suite => 
              `**${suite.name}**: ${suite.passed || 0}/${suite.total || 0} passed`
            ).join('\n') || 'No detailed results available')
            .write();
          
          // Fail the workflow if there are test failures
          if (summary.failedTests > 0) {
            core.setFailed(`${summary.failedTests} test(s) failed`);
          }
          
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Create a simple comment for PR
          const comment = `## 🎯 Test Results Summary
          
          This PR has been automatically tested across multiple environments and browsers.
          
          📊 **Results**: Check the "Test Summary" job above for detailed results.
          📁 **Artifacts**: Test reports and screenshots are available in the workflow artifacts.
          
          > **Note**: This is an automated comment generated by the CI pipeline.`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Job 9: Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always() && github.event_name != 'pull_request'
    timeout-minutes: 5
    
    steps:
    - name: Notify on failure
      if: needs.test-summary.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          // Create an issue for test failures
          const title = `🚨 CI Pipeline Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## CI Pipeline Failure Report
          
          **Workflow**: ${context.workflow}
          **Trigger**: ${context.eventName}
          **Branch**: ${context.ref}
          **Commit**: ${context.sha}
          **Run**: [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})
          
          ### Action Required
          1. Review the failed test results in the workflow artifacts
          2. Analyze the failure patterns and root causes  
          3. Fix the issues and re-run the pipeline
          4. Close this issue once resolved
          
          *This issue was automatically created by the CI pipeline.*`;
          
          // Check if similar issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['ci-failure', 'automated'],
            state: 'open'
          });
          
          if (issues.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['ci-failure', 'automated', 'bug']
            });
          }
